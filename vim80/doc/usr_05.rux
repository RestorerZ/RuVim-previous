*usr_05.txt*    для Vim version 8.0.                   Редакция от 20 фев 2018

                  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРОМ VIM
                            автор Брам Моленар

                              Настройки редактора 


Редактор Vim можно настроить в соответствии с требуемыми предпочтениями и
нуждами, начиная с внешнего вида и заканчивая позицией текста при его наборе.
В этой глава рассказывается как выполнять запуск Vim с требуемыми значениями
параметров, как добавлять модули, чтобы расширить возможности редактороа Vim
или создавать собственные макрокоманды.

|05.1|  Файл vimrc
|05.2|  Пример файла vimrc с пояснениями
|05.3|  Основы назначения клавиатурных команд
|05.4|  Добавление пакета файлов
|05.5|  Добавление внешнего модуля
|05.6|  Добавление файла справки
|05.7|  Окно установки параметров
|05.8|  Часто используемые параметры

 Следующая глава: |usr_06.txt|  Использование подсветки синтаксиса
Предыдущая глава: |usr_04.txt|  Основные приёмы правки текстов
      Содержание: |usr_toc.txt|

==============================================================================
*05.1*  Файл vimrc                              *vimrc-intro* *vimrc-введение*

Чтобы каждый раз не набирать одни и те же команды настройки редактора Vim, их
следует записать в так называемый файл vimrc (VIM Runtime Configuration file)
для запуска программы Vim с необходимыми значениями параметров и клавиатурными
командами.  Указанные в этом файле команды будут выполнятся при каждом запуске
редактора Vim.

Если файл уже существует (например, его создал системный администратор при
установке программы), то его можно открыть для редактирования, выполнив
следующую команду
>
        :edit $MYVIMRC
<
Если данного файла ещё нет, то см. |vimrc|, чтобы выяснить, где он может быть
создан.  Кроме того, в выводе команды ":version" также есть упоминание о
"файл vimrc пользователя", который программа Vim ищет во время запуска.

На системах Unix и Macintosh рекомендуется всегда использовать файл

        ~/.vimrc ~

На системах MS-DOS и MS Windows используется один из следующих файлов:

        $HOME\_vimrc ~
        $VIM\_vimrc ~

Если файл vimrc создаётся впервые, то рекомендуем в самом начале этого файла
указать следующую команду
>
        source $VIMRUNTIME/defaults.vim
<
Данная команда выполнит начальную инициализацию редактора Vim для новых
пользователей (в отличии от пользователей традиционного редактора Vi).
Дополнительные сведения см. здесь: |defaults.vim|.

Файл vimrc может содержать все команды, начинающиеся с двоеточия. Наиболее
простые из них устанавливают те или иные параметры.  Например, если требуется,
чтобы программа Vim всегда запускалась с установленным параметром 'incsearch',
то добавьте в файл vimrc следующую строку
>
        set incsearch
<
Для того чтобы команда в этой строке была выполнена, необходимо завершить
работу Vim и после этого заново запустить его.  Позднее мы научимся делать это
без выхода из Vim.

В этой главе объясняются только самые основные вещи.  Более подробно о
написании файла сценария Vim, читайте здесь: |usr_41.txt|.

==============================================================================
*05.2*  Пример файла vimrc с пояснениями                   *vimrc_example.vim*
                                                          *пример_файла_vimrc*

В первой главе было показано, как запускать редактор Vim в усовершенствованном
режиме (см. |несовместимость|).  Для этого использовался пример файла vimrc
включаемый в поставку программы Vim.  Пример файла vimrc находится здесь:

        $VIMRUNTIME/vimrc_example.vim ~

В этом разделе будут рассмотрено несколько других команды находящиеся в
указанном файле.  В итоге должно появиться представление о том, как создавать
собственные настройки.  Однако мы не будем сейчас давать детальных разъяснений
о каждой команде, поэтому для более подробного описания воспользуйтесь
командой ":help".
>
        set nocompatible
<
Как уже говорилось в первой главе, в документации подразумевается, что
редактор Vim работает в улучшенном режиме, который не всегда совместим с
редактором Vi.  Для этого прежде всего, необходимо сбросить параметр
'compatible' указанной выше командой.
>
        set backspace=indent,eol,start
<
Этот параметр задаёт в какой позиции строки, в режиме вставки, клавишей <BS>
можно удалять символ перед курсором.  Перечисленные через запятую значения
позволяют в редакторе Vim удалять пробельные символы в начале строки, символ
перевода строки и символ, перед которым находился курсор в момент перехода в
режим вставки.
>
        set autoindent
<
Этот параметр указывает, что надо использовать отступ предыдущей строки для
вновь создаваемой строки.  Таким образом, перед новой строкой добавляется то же
самое количество пробельных символов, как и на предыдущей строке.  Например,
при нажатии клавиши <ENTER> в режиме вставки или при использовании команды "o"
для открытия новой строки.
>
        if has("vms")
          set nobackup
        else
          set backup
        endif
<
Эти команды предписывают программе Vim создавать резервную копию файла при его
записи, за исключением системы VMS, которая всегда хранит старые версии
самостоятельно.  Резервная копия файла имеет то же самое название, что и
оригинал, с добавлением символа "~". См. раздел |07.4|.
>
        set history=50
<
Хранить в журнале до 50 команд и 50 шаблонов для поиска.  Если необходимо,
чтобы в редакторе Vim сохранялось меньшее или большее количество записей, то
можно поставить другое число.
>
        set ruler
<
Активация данного функционала позволяет всегда отображать текущее положение
курсора в нижнем правом углу окна редактора Vim.
>
        set showcmd
<
Показывать незавершённую команду в правом нижнем углу окна редактора Vim,
слева от информации о местоположении курсора.  Например, при наборе "2f",
редактором Vim ожидается ввода символа, который требуется найти и как
подсказка отображается "2f".  После нажатия, к примеру, "w" выполняется
команда "2fw" и "2f" исчезает с экрана.

        +-------------------------------------------------+
        |текст в окне Vim                                 |
        |~                                                |
        |~                                                |
        |-- ВИЗУАЛЬНЫЙ РЕЖИМ --         2f     43,8   17% |
        +-------------------------------------------------+
         ^^^^^^^^^^^                  ^^^^^^^^ ^^^^^^^^^^
          'showmode'                 'showcmd'  'ruler'

>
        set incsearch
<
Подсвечиваются совпадения с искомым текстом по мере набора шаблона поиска.
>
        map Q gq
<
Назначается клавиатурная команда.  Подробнее об этом говорится в следующем
разделе.  В данном случае определяется, что команда "Q" выполняет
форматирование при помощи оператора "gq".  Именно так это работало до Vim 5.0.
Если такая клавиатурная команда не назначена, то команда "Q" переключает
редактор Vim в режим Ex, но он сейчас это вряд ли потребуется.
>
        vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>
<
Это также клавиатурная команда, но более сложная.  Мы не будем здесь объяснять
как она работает, но смысл её заключается в следующем: по команде "_g" в
визуальном режиме копируется выделенный текст и выполняется его поиск в файлах
языка программирования Cи.  Как видите, клавиатурные команды могут делать
довольно сложные вещи, оставаясь при этом всего-навсего последовательностью
команд, исполняемых как если бы их набрали на клавиатуре.
>
        if &t_Co > 2 || has("gui_running")
          syntax on
          set hlsearch
        endif
<
Этими командами будет включаться подсветка синтаксиса на терминалах, где есть
поддержка цвета и при запуске редактора Vim с графическим интерфейсом
пользователя.  Параметр 'hlsearch' активирует функционал редактора Vim по
подсветке совпадений с последним шаблоном поиска.  Команда "if" очень полезна
для установки параметров при соблюдении определённых условий.  Подробнее об
этом написано в главе |usr_41.txt|.

                                                             *vimrc-тип_файла*
                                                              *vimrc-filetype*
>
        filetype plugin indent on
<
Эти команды позволяют включить три интеллектуальных механизма:

1. Определение типа файла
   При начале редактирования файла в редакторе Vim, выполняется попытка
   определить с каким типом файла идёт работа.  Если редактируется "main.c",
   то по расширению ".c" определяется данный тип файла как относящийся к языку
   программирования Cи.  Если редактируется файл, начинающийся с "#!/bin/sh",
   то в редакторе Vim распознаётся, что это файл сценария оболочки "sh".
   Определение типа файла используется для подсветки синтаксиса и двух других
   операций, которые рассматриваются ниже.  См. |типы_файлов|.

2. Использование модулей для файлов определённого типа
   Файлы разных типов удобнее редактировать с наиболее подходящими для этого
   параметрами программы Vim.  Например, при редактировании файлов типа "c"
   очень полезно включить параметр 'cindent' для автоматического
   форматирования отступов строк.  Такие часто употребляемые параметры описаны
   в файлах модулей для определённых типов файлов.  Можно также написать свой
   собственный модуль для любого типа файла, см. |написание_модулей_типа_файла|.

3. Использование файлов форматирования отступов
   При редактировании исходных текстов программ отступ строки часто может быть
   вычислен автоматически.  В редакторе Vim имеется набор правил вычисления
   отступов для некоторых типов файлов.  См. |:filetype-indent-on| и 'indentexpr'.
>
        autocmd FileType text setlocal textwidth=78
<
Этой командой предписывается перенос строк, если они становятся длиннее 78
символов, для файлов, которые были определены как обычный текст.  В команде
фактически две части: "autocmd FileType text" является автокомандой,
определяющей, что последующая команда выполняется всякий раз, когда тип файла
определён как "обычный текст"; "setlocal textwidth=78" присваивается параметру
'textwidth' значение 78 для данного файла.
>
        autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
<
Ещё одна автокоманда.  В данном случае она выполняется после чтения файла.
Сложным набором команд после неё выполняется поиск был ли установлен маркер '"
и осуществляется переход к этому маркеру.  Обратная косая черта в начале
строки используется для продолжения команды с предыдущей строки, чтобы строка
не была слишком длинной.  См. |продолжение_строки|.  Этот синтаксис
поддерживается только в файле сценария редактора Vim, но не в командной
строке.

==============================================================================
*05.3*  Основы назначения клавиатурных команд

Составные команды позволяют назначить серию команд редактора Vim на отдельную
клавишу клавиатуры.  Предположим, что требуется часто выполнять операцию
заключения отдельных слов в фигурные скобки, т. е. заменять слово вроде
"количество" на слово "{количество}".  Воспользовавшись командой ":map" можно
указать, что в данном случае будет использоваться клавиша F5.  Сама команда
выглядит так
>
        :map <F5> i{<Esc>ea}<Esc>
<
        Примечание.
        При наборе этой команды, обозначение <F5> должно вводиться буквально,
        путём набора четырёх символов на клавиатуре.  Обозначение <Esc> также
        вводится в пять символов, а не нажатием клавиши <ESC>.  Помните об
        этом при чтении данного руководства!

Давайте разберёмся, что происходит по порядку:
    <F5>        Использовать функциональную клавишу F5 для запуска
                последующей серии команд.
                
    i{<Esc>     Вставить символ {. <Esc> - завершить режим вставки.
    
    e           Переместиться к концу слова.
    
    a}<Esc>     Добавить } в конце слова. <Esc> - завершить режим вставки.

После того, как будет выполнена приведённая выше команда ":map", всё что
требуется сделать для того, чтобы заключить слово в фигурные скобки, это
подвести курсор к первому символу слова и нажать клавишу F5.

В этом примере в качестве назначения составной команды используется
единственная клавиша, но это может быть любая строка.  Следует, однако, иметь
в виду, что при использовании уже существующей команды редактора Vim эта
команда больше не будет доступна, поэтому таких ситуаций лучше избегать.
   Одним из символов, которые полезно использовать с составными командами,
является обратная наклонная черта.  Поскольку, скорее всего, потребуется
определить несколько составных команд, то используйте совместно с ней ещё
какой-нибудь символ.  Например, можно назначить, что "\p" будет добавлять
круглые скобки вокруг слова, а "\c" будет добавлять фигурные скобки.  Пример.
>
        :map \p i(<Esc>ea)<Esc>
        :map \c i{<Esc>ea}<Esc>
<
Требуется набирать \ и p достаточно быстро друг за другом, чтобы в редакторе
Vim распознавалось, что они связаны друг с другом.

По команде ":map", набранной без аргументов, отображается список текущих
составных команд, как минимум для командного режима.  Подробнее о составных
командах читайте в разделе |40.1|.

==============================================================================
*05.4* Добавление пакета файлов                  *add-package* *добавление_пакета*
                                           *matchit-install* *установка_matchit*

Пакеты являются набором файлов, которые можно добавлять к редактору Vim.
Существует два вида пакетов: дополнения и автозагружаемые при запуске
редактора Vim.

Редактор Vim поставляется с несколькими пакетами, которые можно использовать
как дополнения.  Например, модуль matchit.  Этот модуль расширяет существующую
команду редактора Vim "%" за счёт поиска и перемещения курсора к
соответствующим парным тегам HTML, операторам if/else/endif в языке сценариев
редактора Vim и прочим парным элементам.  Это весьма удобно, хотя и не
является совместимым с предыдущими версиями (это и является причиной, почему
он не подключен при установке).

Чтобы начать использовать модуль matchit, добавьте всего одну строку в
файл vimrc
>
        packadd! matchit
<
И это всё!  После перезапуска редактора Vim, всю информацию об этом модуле
можно прочитать в справочной документации
>
        :help matchit
<
И документация будет тут же отображена, потому что когда по команде ":packadd"
выполнялось подключение модуля был также добавлен и каталог этого модуля в
параметр 'runtimepath', чтобы можно было найти и его справочный файл.

Всевозможные пакеты можно найти на просторах Интернет.  Как правило они
представлены там или в виде архивов, или на различных хранилищах.  В случае с
архивами необходимы следующие действия: 
        1. Создать каталог для требуемого пакета
>
            mkdir -p ~/.vim/pack/fancy
<
           вместо "fancy" может быть любое название которое нравится.  Лучше
           использовать название соответствующее наименованию пакета.
        2. Распакуйте архив в этот каталог.  Предполагается, что корневым
           каталогом в архиве является каталог с названием "start"
>
            cd ~/.vim/pack/fancy
            unzip /tmp/fancy.zip
<
          Если внутреннее содержание архива отличается от предполагаемого,
          удостоверьтесь, что маршрут будет соответствовать примерно такому:
          ~/.vim/pack/fancy/start/fancytext/plugin/fancy.vim ~
          Здесь "fancytext" является названием пакета, ну или это будет
          названием устанавливаемого пакета.

Дополнительную информацию о пакетах можно посмотреть здесь: |packages|.

==============================================================================
*05.5*  Добавление внешнего модуля              *add-plugin* *plugin* *модуль*
                                                           *добавление_модуля*

Функциональность редактора Vim может быть расширена за счёт внешних модулей.
Модулем является файл содержащий команды на сценарном языке редактора Vim,
который подключается автоматически при запуске программы Vim.  Подключение
модуля выполняется добавлением соответствующего файла сценария в каталог
plugin программы Vim.
{Поддерживается только при компиляции редактора Vim со свойством |+eval|}

Существует два вида модулей:

    модули общего назначения --- используются для всех типов файлов;
    модули файлов --- используются только для определённых типов файлов.

Сначала мы обсудим общие модули, а затем рассмотрим модули типов файлов
|добавление_модуля_типа_файла|.

                                                         *стандартного_модуля*
МОДУЛИ ОБЩЕГО НАЗНАЧЕНИЯ                  *standard-plugin* *стандартные_модули*

При запуске редактора Vim автоматически подключаются несколько общих модулей.
Такие модули добавляют функциональные возможности, которые хотелось бы
использовать большинству пользователей, но они были реализованы в виде
подключаемых модулей, а не реализованы в коде программы.  Список стандартных
модулей можно посмотреть здесь: |список_стандартных_модулей|.  Также смотрите
|загрузка_модулей|.

                                *add-global-plugin* *добавление_общего_модуля*
Можно добавить общий модуль для расширения функциональности, чтобы он всегда
подключался при запуске редактора Vim.  Для этого необходимо выполнить всего
две операции:
1. Найти требуемый модуль.
2. Поместить его в соответствующий каталог.


ГДЕ ВЗЯТЬ НУЖНЫЙ МОДУЛЬ ОБЩЕГО НАЗНАЧЕНИЯ

Где найти необходимые модули?

- Некоторые модули включены в поставку программы Vim.  Посмотрите в каталоге
  $VIMRUNTIME/macros и его подкаталогах.
- Загрузите требуемые модули из сети, полезный адрес: http://www.vim.org
- Иногда исходные тексты модулей публикуются в |рассылке| Vim.
- Модуль можно написать самостоятельно.  См. |написать_свой_модуль|.

Некоторые модули доступны как vimball архивы, см. |vimball|.
Ряд модулей имеют возможность автоматического обновления, см. |getscript|.

ИСПОЛЬЗОВАНИЕ МОДУЛЯ ОБЩЕГО НАЗНАЧЕНИЯ            *общие_модули-использование*

Прочитайте внимательно поясняющий текст в файле модуля или прилагающийся к
нему файл с описанием, чтобы узнать о правилах использования модуля.
Скопируйте файл модуля в каталог модулей:

        Система         Каталог модулей  ~
        Unix            ~/.vim/plugin/
        PC и OS/2       $HOME/vimfiles/plugin или $VIM/vimfiles/plugin
        Amiga           s:vimfiles/plugin
        Macintosh       $VIM:vimfiles:plugin
        Mac OS X        ~/.vim/plugin/
        RISC-OS         Choices:vimfiles.plugin

Пример для UNIX-подобных систем (предположим, что пока каталога для модулей нет):
>
        mkdir ~/.vim
        mkdir ~/.vim/plugin
        cp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin
<
Вот и всё! Теперь можно использовать команды, определённые в этом модуле для
выключки строк, т. е. выравнивания строк по ширине.

Для лучшей организации и упорядочиванию модулей целесообразно помещать
добавляемые модули не в сам каталог plugin, а в подкаталоги этого каталога.
Например, все модули для языка программирования Perl могут быть организованы
таким образом "~/.vim/plugin/perl/".


МОДУЛИ ТИПОВ ФАЙЛОВ        *add-filetype-plugin* *ftplugins* *модули_типа_файла*
                                                *добавление_модуля_типа_файла*

Программа Vim распространяется с набором модулей для ряда типов файлов,
которые можно начать использовать при помощи команды
>
        filetype plugin on
<
Вот и всё, что для этого требуется. См. |vimrc-тип_файла|.

Если для какого-то определённого типа файла нет модуля, или имеется более
качественный модуль чем поставляемый с редактором, то можно его добавить в
свою систему.  Для этого нужно:

1. Получить копию модуля.
2. Поместить её в соответствующий каталог.


ГДЕ ВЗЯТЬ МОДУЛЬ ФАЙЛА

Там же, где берутся модули общего назначения.  Посмотрите, если есть указание
типа файла, то это модуль для этого типа файла.  Сценарии в каталоге
$VIMRUNTIME/macros являются общими, а модули типов файла находятся в каталоге
$VIMRUNTIME/ftplugin.


ИСПОЛЬЗОВАНИЕ МОДУЛЯ ФАЙЛА                    *ftplugin-name*
                                            *модуль_типа_файла-использование*

Модули файла добавляются копированием в необходимый для этого каталог.  Он
находится там же, где и каталог для модулей общего назначения, но называется
"ftplugin".  Предположим, есть модуль для типа файла "stuff" и используется
система Unix.  Тогда требуется поместить файл модуля в каталог ftplugin
>
        mv thefile ~/.vim/ftplugin/stuff.vim
<
Если такой файл уже существует, то значит, уже установлен модуль для типа файла
"stuff".  Проверьте, не конфликтует ли существующий модуль с модулем, который
добавляется.  Если всё в порядке, то можете присвоить новому модулю другое
наименование
>
        mv thefile ~/.vim/ftplugin/stuff_too.vim
<
Символ подчёркивания используется для отделения названия типа файла от
остальной части названия, которая может быть чем угодно.  Наименование
"otherstuff.vim" не будет работать, поскольку такой модуль будет загружаться
для файла с типом "otherstuff".

В MS-DOS нельзя использовать длинные наименования файлов.  Если тип файла
содержит более шести символов, то при добавлении дополнительного модуля
возникнут осложнения.  Для решения задач такого рода можно использовать
подкаталог
>
        mkdir $VIM/vimfiles/ftplugin/fortran
        copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim
<
В общем случае могут использоваться следующие наименования для модулей типа
файла
>
        ftplugin/<filetype>.vim
        ftplugin/<filetype>_<name>.vim
        ftplugin/<filetype>/<name>.vim
<
В качестве "<name>" можно использовать любое название.
Например, для типа файла "stuff" на Unix
>
        ~/.vim/ftplugin/stuff.vim
        ~/.vim/ftplugin/stuff_def.vim
        ~/.vim/ftplugin/stuff/header.vim
<
Часть наименования <filetype> это название типа файла, для которого будет
применяться данный модуль.  Только файлы данного типа будут использовать
настройки, взятые из модуля.  Часть <name> не имеет значения и может
использоваться для загрузки дополнительных модулей для данного типа файла.
Обратите внимание, что модуль должен иметь расширение ".vim".


ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

|модули_для_типа_файла|
        Документация по модулям типов файлов и информация о том, как избежать
        составных команд, которые могут вызвать нежелательные последствия.

|загрузка_модулей|
        Загрузка модулей общего назначения при запуске редактора Vim.

|переопределение_в_модулях_типов_файлов|
        Переопределение установок, заданных в модулях общего назначения.

|написать_свой_модуль|
        Как самому написать модуль на сценарном языке редактора Vim.

|подробно_о_модулях|
        Дополнительная информация об использовании модулей и советы о том, что
        делать, когда модуль не работает.

|новый_тип_файла|
        Как настроить распознавание нового типа файлов.

==============================================================================
                                                    *добавление_файла_справки*
*05.6*  Добавление файла справки                       *add-local-help*

Если повезёт, то модули, которые устанавливаются, будут поставляться вместе с
файлом справки.  Давайте посмотрим, как правильно установить файл справки,
чтобы он был доступен в справочной системе.
   Возьмём, например, модуль "doit.vim", у этого модуля есть файл справки
"doit.txt".  Для начала скопируем модуль в необходимый каталог.  На этот раз
сделаем это непосредственно из редактора Vim, используя переменную окружения
$VIMRUNTIME.  (Если уже существуют необходимые каталоги, то можно пропустить
некоторые команды "mkdir").
>
        :!mkdir ~/.vim
        :!mkdir ~/.vim/plugin
        :!cp $VIMRUNTIME/macros/doit.vim ~/.vim/plugin
<
Команда "cp" используется в системах Unix, в системах MS-DOS и MS Windows
необходимо использовать команду "copy".

Теперь создадим каталог "doc" в одном из каталогов, указанных в 'runtimepath'.
>
        :!mkdir ~/.vim/doc
<
Скопируем в него файл справки
>
        :!cp $VIMRUNTIME/macros/doit.txt ~/.vim/doc
<
А сейчас, самое интересное --- при помощи команды |:helptags| создадим
сторонний индексный файл, который позволит перемещаться к определённым главам
и разделам в новом файле справки.
>
        :helptags ~/.vim/doc
<
Теперь можно пользоваться командой 
>
        :help doit
<
чтобы найти информацию о "doit" в файле справки, который мы только что
добавили.  Если наберёте
>
        :help local-additions
<
то увидите соответствующую ссылку в файле справки.  Заголовки дополнительных
файлов справки автоматически добавляются в этот раздел.

О написании собственного файла справки см. |создание_справки|.

==============================================================================
*05.7*  Окно установки параметров

Справочник по параметрам редактора можно посмотреть здесь: |параметры|.
Альтернативным вариантом может служить использование команды
>
        :options
<
По этой команде будет открыто новое окно со списком параметров сгруппированных
по категориям и каждый параметр сопровождается кратким пояснением.  Для
перехода к списку параметров, включённых в необходимую категорию, подведите
курсор к требуемой категории и нажмите клавишу <ENTER>.  Повторное нажатие
клавиши <ENTER> возвращает к списку категорий.  Для возврата к списку
категорий можно также использовать комбинацию клавиш CTRL-O.

Значения параметров можно изменять прямо в этом окне.  Например, перейдите в
категорию "отображение текста" как описано выше, затем переместите курсор к
строке

        set wrap        nowrap ~

После нажатия клавиши <ENTER>, строка изменится на

        set nowrap      wrap ~

Это означает, что теперь этот параметр сброшен.

Краткое описание параметра 'wrap' даётся выше строки со значениями установок.
Переместите курсор вверх к строке с описанием и нажмите клавишу <ENTER> для
перехода к полному тексту справки по параметру 'wrap'.

У тех параметров, которые принимают числовое или строковое значение, можно
редактировать эти значения прямо в окне установок параметров.  Чтобы изменения
вступили в силу, нажмите клавишу <ENTER>.  Например, переместите курсор
к строке

        set so=0 ~

Установите курсор на цифре, являющейся значением этого параметра, при помощи
команды "$".  Измените текущее значение на, допустим, цифру пять командой
"r5".  Теперь нажмите клавишу <ENTER>, чтобы новое значение параметра вступило
в силу.  Заметьте, что теперь при перемещении курсора, прокрутка текста в окне
начинается до того момента, как курсор подходит к границе окна.  Именно это и
делает параметр 'scrolloff', он указывает на позицию отступа от границы окна,
с которой начинается прокрутка текста.

==============================================================================
*05.8*  Часто используемые параметры

В программе Vim существует огромное количество параметров, но возможно, что
большинство из них не потребуется изменять, т. к. они имеют оптимальные
настройки для большинства задач.  Однако о некоторых параметрах, которые
позволяют более точно настроить редактор под свои потребности, будет
рассказано далее.  Не забудьте, что по каждому параметру можно получить
подробную справку при помощи команды ":help", название параметра при этом
следует заключать в одинарные кавычки.  Например,
>
        :help 'wrap'
<
Если вдруг что-то напутали с установками параметра, то можно восстановить
значение по умолчанию при помощи символа амперсанд (&) указанного после
названия параметра.  Например,
>
        :set iskeyword&
<
ОТКЛЮЧЕНИЕ ПЕРЕНОСА СТРОК

В редакторе Vim обычно выполняется перенос длинных строк, выходящие за
границу области редактирования, что позволяет видеть весь текст целиком.  Но
иногда может потребоваться, чтобы строки не переносились, а продолжались далее
за границу области редактирования.  Правда, в этом случае придётся
пользоваться горизонтальной прокруткой, чтобы просматривать фрагменты строк
скрытых за границей окна.  Перенос строк отключается командой
>
        :set nowrap
<
Если курсор перемещается к тексту, который скрыт за границей экрана, то в
редакторе Vim выполняется автоматическая прокрутка строк по горизонтали.
Чтобы при прокрутке строки после курсора отображалось, например, десять
символов, выполните следующую команду
>
        :set sidescroll=10
<
Это не изменяет сам текст в файле, только способ его отображения, делая
горизонтальную прокрутку более плавной.


ПЕРЕХОД ПО СТРОКАМ КОМАНДАМИ ПЕРЕМЕЩЕНИЯ

При выполнении большинства команд перемещения, движение курсора
останавливается на границе строк.  Тем не менее, такое поведение можно
изменить при помощи параметра 'whichwrap'.  Следующая команда устанавливает
этот параметр в значение по умолчанию
>
        :set whichwrap=b,s
<
Данное значение параметра позволяет при нажатии клавиши <BACKSPACE>, когда
курсор находится в начальной позиции текущей строки, перемещать его в конечную
позицию предыдущей строки.  А нажатием клавиши <SPACE> перемещать курсор с
конечной позиции текущей строки к начальной позиции следующей строки.

Для того чтобы можно было выполнять переход по строкам клавишами управления
курсором <LEFT> и <RIGHT>, используйте команду
>
        :set whichwrap=b,s,<,>
<
Однако это будет работать только в командном режиме.  Чтобы поведение клавиш
<LEFT> и <RIGHT> было таким же и в режиме вставки, используйте команду
>
        :set whichwrap=b,s,<,>,[,]
<
Также можно добавить ещё несколько флагов, см. описание 'whichwrap'.


ОТОБРАЖЕНИЕ СИМВОЛОВ ТАБУЛЯЦИИ

Символы табуляции в файле, как правило, не видны, чтобы сделать их видимыми
используйте команду
>
        :set list
<
Теперь каждый символ табуляции отображается в виде символов ^I.  Кроме того, в
конечной позиции строки выводится символ $, так что можно сразу видеть лишние
пробелы в конце строк.
   К сожалению, когда в файле много символов табуляции, то текст при таких
настройках начинает напоминать кашу.  На терминалах, поддерживающих цвет, а
также в графическом интерфейсе, в окне редактора Vim, можно показывать пробелы
и символы табуляции в виде подсвеченных символов.  Для этого воспользуйтесь
параметром 'listchars':
>
        :set listchars=tab:>-,trail:-
<
Теперь каждый символ табуляции будет показан в виде ">---" (с разным
количеством символов "-"), а пробелы в конце строк в виде "-".  Гораздо
приятнее, правда?


КЛЮЧЕВЫЕ СЛОВА

Через параметр 'iskeyword' указывается, какие символы могут образовывать
одинарное слово.  Подробнее см. |слово|.
Пример.
>
        :set iskeyword
<
        iskeyword=@,48-57,_,192-255 ~

Символ "@" соответствует всем буквам алфавита, "48-57" соответствует символам
ASCII от 48 до 57 (т. е. цифры от 0 до 9), "192-255" это печатные латинские
символы  [Прим. перевод. Под "всеми буквами алфавита" подразумевается
латинский алфавит, т. е. a-z и A-Z.  Для корректной работы с русским
алфавитом, необходимо добавить диапазон 128-157].
    Для того чтобы команды, подобные команде "w" считали такие слова, как
"что-то", одним словом, необходимо включить в перечень словарных символов
символ тире.  Это можно сделать так
>
        :set iskeyword+=-
        :set iskeyword
<
        iskeyword=@,48-57,_,192-255,- ~

Как можно заметить, при добавлении нового флага была автоматически вставлена
запятая, разделяющая значения параметра.
    Чтобы удалить флаг параметра, используйте операцию "-=".  Например, удалим
символ подчёркивания
>
        :set iskeyword-=_
        :set iskeyword
<
        iskeyword=@,48-57,192-255,- ~

На этот раз разделяющая запятая будет автоматически удалена.


ОБЛАСТЬ УВЕДОМЛЕНИЙ

Изначально в редакторе Vim под область уведомлений отводится лишь одна нижняя
строка.  Однако, когда сообщение слишком длинное, то оно либо обрезается, и
будет видна только часть сообщения, либо текст прокручивается, так что для
просмотра требуется нажимать клавишу <ENTER>.
    Для изменения этой ситуации, можно задать параметр 'cmdheight',
посредством которого указывается количество строк, используемых для вывода
сообщений. Пример.
>
        :set cmdheight=3
<
При этом, конечно, на экране остаётся меньше места для редактирования текста,
так что приходится идти на компромисс.

==============================================================================

Следующая глава: |usr_06.txt|  Использование подсветки синтаксиса
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:ft=help:norl:

*usr_03.txt*    для Vim version 8.0.                    Редакция от 05 янв 2016

                   РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
                            автор Брам Моленар

                            Навигация по документу

Перед тем, как набирать или удалять текст, курсор должен быть установлен
в требуемую позицию.  И в редакторе Vim имеется большое количество команд для
позиционирования курсора.  В этой главе рассказывается, как использовать
наиболее важные команды такого рода.  Перечень команд перемещения курсора
можно посмотреть здесь |Q_lr|.

|03.1|  Перемещение по словам
|03.2|  Перемещение к началу и окончанию строки
|03.3|  Перемещение к заданному символу
|03.4|  Поиск соответствующей парной скобки
|03.5|  Перемещение к заданной строке
|03.6|  Определение местонахождения курсора в тексте
|03.7|  Прокрутка текста в окне редактора
|03.8|  Основные приёмы поиска
|03.9|  Основные приёмы поиска с применением шаблонов
|03.10| Использование маркеров

 Следующая глава: |usr_04.txt|  Основные приёмы правки текстов
Предыдущая глава: |usr_02.txt|  Первые шаги в редакторе Vim
      Содержание: |usr_toc.txt|

==============================================================================
*03.1*  Перемещение по словам

Для перемещения курсора на одно слово вперёд используется команда "w" (word,
слово).  Как и большинство других команд редактора Vim, она может предворятся
счётчиком, указывающим на сколько слов выполнить перемещение курсора.
Например, по команде "3w" курсор будет перемещён на три слова вперёд.  Вот как
это работает:

        Это строка с текстом для примера перемещения по словам ~
        ---->------>->------------------->
          w  w      w 3w

Обратите внимание, что по команде "w" курсор перемещается к началу следующего
слова, даже если курсор уже находится в начале текущего слова.
    По команде "b" (back, назад) курсор перемещается назад к началу
предыдущего слова:

        Это строка с текстом для примера перемещения по словам ~
        <---<------<-<-----------<--------
          b     b   b      2b           b

Также имеются команды "e" (end, конец), по которой курсор перемещается
к окончанию следующего слова, и команда "ge", по которой курсор перемещается
к окончанию предыдущего слова:

        Это строка с текстом для примера перемещения по словам ~
                 <-        <--- -------> ---------->
                 ge          ge     e       e

Если курсор находится на последнем слове в строке, то по команде "w" он будет
перемещён к началу первого слова на следующей строке.  Таким образом, можно
перемещать курсор по абзацу текста значительно быстрее, чем с использованием
команды "l".  По команде "b" выполняются аналогичные действия, но в обратном
направлении.

Понятие "слово" включает все символы за исключением символов не являющимися
частью слова, такими, как ".", "-" или ")".  Для изменения правил, по которым
в редакторе Vim определяется, что именно является словом, смотрите пояснения
к параметру 'iskeyword' [Прим. перевод. Настройка этого параметра весьма
полезна для русского языка, например, слов пишущихся через дефис].  Если
после изменения этого параметра что-то пойдёт не так как ожидалось, то
вернуться к изначальному состоянию можно следующим образом
>
    :set iskeyword&
<
    Также возможно перемещение по |СЛОВАМ|, разделёнными пробельными или иными
символами.  Такие |СЛОВА| не являются словами как таковыми, поэтому для их
обозначения используются прописные буквы.  Команды для перемещения по |СЛОВАМ|
в этом случае даются командами в виде прописных букв, как показано ниже:

            ge           b           w                            e
           <--          <-         ----->                        -->
Пример стро-ки с текстом, со специальным/разделением/слов (и ещё кое-что). ~
     <--------   <--------         ----------------------->      -------->
            gE           B           W                            E

При помощи этих команд, являющимися строчными и прописными буквами, можно
быстро перемещаться вперёд и назад по тексту абзаца.

==============================================================================
*03.2*  Перемещение к началу и окончанию строки

По команде "$" (символ доллара), курсор перемещается к окончанию строки.  Если
на клавиатуре есть клавиша <END>, то нажатие на неё приводит к выполнению той
же самой операции.

По команде "^" (символ циркумфлекса), курсор перемещается к первому
непробельному символу строки.  А по команде "0" (цифра ноль), курсор
перемещается к самому первому символу строки.  Клавиша <HOME> работает как
команда "0".  Покажем это на примере:

                    ^
             <--------------
        .....Это строка с текстом примера ~
        <-------------------  ---------->
                    0             $
(здесь ..... обозначает пробелы).

    Перед командой "$" может быть указан счётчик, как и для большинства команд
перемещения, однако, перемещение к окончанию строки несколько раз было бы
бессмысленной операцией.  Вместо этого, числовая приставка указывает редактору
на перемещение курсор к окончанию другой строки.  Например, по "1$"
перемещение выполняется к окончанию текущей (первой) строки, по "2$"
к окончанию следующей строки и т. д.
    Команда "0" не принимает числовой приставки, поскольку тогда сам "0" был
бы частью числовой приставки.  Использование числа с "^" не производит
никакого эффекта.

==============================================================================
*03.3*  Перемещение к заданному символу

Одна из самых полезных команд перемещения — это команда односимвольного
поиска.
По команде "fx" (find, искать) производится поиск символа x в строке в прямом
направлении, начиная с текущей позиции курсора.
    Допустим, что курсор находится в начале приведённой ниже строки примера,
и необходимо переместить курсор на символ Р слова "Репина".  Для этого просто
выполните команду "fР", и курсор будет находиться над символом Р:

        Картина Репина: "Кощей Бессмертный слушает кукушку". ~
        -------->------------>
           fР         fй

По команде "fй" курсор перемещается на последний символ слова "Кощей".
    С этой командой также можно использовать счётчик.  К началу слова "слушает"
можно переместить курсор по команде "3fс":

        Картина Репина: "Кощей Бессмертный слушает кукушку". ~
                --------------------------->
                            3fс

По команде "F" (прописная латинская буква F) поиск производится в обратном
направлении от текущей позиции курсора:

        Картина Репина: "Кощей Бессмертный слушает кукушку". ~
                <---------------------------
                            FР

По команде "tx" (to, к) выполняются те же действия, как и по команде "fx", но
курсор перемещается в позицию ПЕРЕД искомым символом.  Поиск в обратном
направлении по команде "Tx".

        Картина Репина: "Кощей Бессмертный слушает кукушку". ~
                 <-------------------  --------->
                        TР                tт

Эти четыре команды можно повторно выполнять при помощи команды ";" (символ
точка с запятой).  По команде "," (символ запятая), осуществляется повторное
выполнение этих команд, но поиск будет выполнятся в противоположном
направлении.  Курсор при этом не покидает текущей строки, даже если само
предложение имеет продолжение на соседних строках.

Иногда, начав операцию поиска, обнаруживается, что команда отдана с ошибкой.
Например, была отдана команда "f", но на самом деле необходимо провести поиск
в обратном направлении.  Для прекращения поиска, нажмите клавишу <ESC>.  Таким
образом, "f<ESC>" является прерванной командой поиска и ничего не делает.

Примечание.
При нажатии клавиши <ESC> прерывается выполнение многих операций, а не только
поиска.

==============================================================================
*03.4*  Поиск соответствующей парной скобки

При написании исходных текстов программ часто приходится создавать конструкции
с вложенными скобками.  Команда "%" (символ процента), оказывается в этих
случаях весьма кстати: по этой команде курсор перемещается к соответствующей
скобке.  Если курсор находится на "(", то по команде "%", курсор будет
перемещён на соответствующую ей ")".  Если курсор находится на ")", то по
команде "%" курсор будет перемещён на соответствующую ей "(".

                            %
                         <----->
                if (a == (b * c) / d) ~
                   <---------------->
                            %

То же самое работает и для пар скобок [] и {}.  (Список соответствий можно
определить при помощи параметра 'matchpairs').

Если во время подачи команды "%", курсор находится вне символа для которого
ищется соответствие, то будет выполнен прямой поиск в строке пока не будет
найден первый символ из пары соответствия.  А уже после этого курсор будет
перемещён на второй символ из этой пары соответствия.  Например, если курсор
находится в начале строки, то по команде "%" будет найдена первая в строке "("
и курсор переместится к её паре:

                if (a == (b * c) / d) ~
                ---+---------------->
                           %

==============================================================================
*03.5*  Перемещение к заданной строке

При написании программ на языке Си или Си++ порой во время компиляции выводятся
вот такие вот сообщения об ошибках:

        prog.c:33: j   undeclared (first use in this function) ~

Это говорит о том, что необходимо что-то исправить на строке 33.  Так как же
найти эту строку 33?  Можно набрать "9999k", чтобы перейти к началу файла
и затем "32j", чтобы сместить курсор вниз на 32 строки.  Это работает, но это
не самый лучший способ.  Гораздо лучше воспользоваться командой "G" (Go, иди).
    Используя счётчик с этой командой можно перемещать курсор к требуемой
строке.  Например, по команде "33G" курсор перемещается на строку 33.  (Далее
рассматривается ещё более удобный способ разбора перечня ошибок, выявленных
компилятором.  См.  информацию о команде ":make" в |usr_30.txt|).
    По команде "G" (латинская прописная буква G) без указания счётчика, курсор
будет позиционироваться в самом конце файла.  Чтобы быстро переместить курсор
к началу файла используйте команду "gg".  Данная команда эквивалентна команде
"1G", но требует чуть меньше усилий при наборе на клавиатуре.

            |   первая строка файла      ^
            |   текст текст текст текст  |
            |   текст текст текст текст  |  gg
        7G  |   текст текст текст текст  |
            |   текст текст текст текст
            |   текст текст текст текст
            V   текст текст текст текст  |
                текст текст текст текст  |  G
                текст текст текст текст  |
                последняя строка файла   V

Другой способ заключается в использовании команды "%" с числовой приставкой.
Например, по команде "50%" курсор перемещается в середину файла, по "90%"
курсор перемещается ближе к концу.

Предыдущие примеры предполагают, что необходимо переместить курсор к строке
в файле независимо от того, видна она в данный момент на экране или нет.  Но
что если требуется переместить курсор к одной из строк, видимых на экране?  На
иллюстрации показаны три команды, которые можно для этого использовать:

                        +---------------------------+
                H -->   | текст пример текст        |
                        | пример текст              |
                        | текст пример текст        |
                        | пример текст              |
                M -->   | текст пример текст        |
                        | пример текст              |
                        | текст пример текст        |
                        | пример текст              |
                L -->   | текст пример текст        |
                        +---------------------------+

(H - Home, начальный, домой; M - Middle, середина; L - Last, последний).

==============================================================================
*03.6*  Определение местонахождения курсора в тексте

Посмотреть точную позицию курсора в файле можно тремя способами:

1.  При помощи команды CTRL-G.  При этом будет выведено сообщение, похожее на
    это (при отключенном параметре 'ruler'):

        "usr_03.txt" строка 238 из 693 --34%-- колонка 45-52 ~

    В сообщении отображается название файла, который в данный момент
    редактируется, номер строки, в которой находится курсор, общее количество
    строк, процентное отношение объёма текста до курсора ко всему файлу,
    и колонка, в которой расположен курсор.
        Иногда номер колонки показан в виде двух чисел.  Например, "колонка
        2-9".  Это означает, что курсор находится на втором символе в строке,
        но поскольку один из символов является символом табуляции, занимающим
        восемь экранных символов, то номер экранной колонки равен 9.

2.  Установив параметр 'number'.  Посредством этого параметра включается показ
    номера перед каждой строкой для окон редактора Vim.
>
        :set number
<
    Для выключения нумерации строк используйте команду
>
        :set nonumber
<
    Поскольку 'number' является переключающим параметром, то добавление "no" к
его названию переводит его в не активное состояние.  Переключающий параметр
может иметь только два значения: включено (on) или выключено (off).
    В редакторе Vim имеется множество параметров.  Помимо переключающих
параметров, есть также параметры, принимающие числовые и строковые значения.
Далее будут показаны ещё примеры употребления параметров.

3.  Установив параметр 'ruler'.  Это позволит отображать позицию курсора
    в нижнем правом углу окна редактора Vim
>
        :set ruler
<
Использование параметра 'ruler' имеет то преимущество, что такая "линейка" не
занимает много места, тем самым оставляя больше экранного места для самого
текста.

==============================================================================
*03.7*  Прокрутка текста в окне редактора

По команде CTRL-u (up, вверх) текст в окне прокручивается на половину высоты
вниз.  Представьте, что вы смотрите на текст сквозь рамку и перемещаете эту
рамку вверх на половину высоты окна.  При этом текст в окне как бы смещается
вниз.  Запутались, что значит верх и что значит низ?  Ничего страшного,
большинство пользователей испытывают в начале те же самые трудности.
    По команде CTRL-d (down, вниз) окно просмотра перемещается на половину
высоты вниз, таким образом, сам текст перемещается вверх.

                                        +----------------+
                                        | какой-то текст |
                                        | какой-то текст |
                                        | какой-то текст |
        +----------------+              | какой-то текст |
        | какой-то текст |  CTRL-u  --> |                |
        |                |              | 123456         |
        | 123456         |              +----------------+
        | 7890           |
        |                |              +----------------+
        | пример         |  CTRL-d -->  | 7890           |
        +----------------+              |                |
                                        | пример         |
                                        | пример         |
                                        | пример         |
                                        | пример         |
                                        +----------------+

Для прокрутки на одну строку используйте CTRL-e (прокрутка вверх) и CTRL-y
(прокрутка вниз).  Запомнить очень легко: CTRL-e показывает "Ещё одну строку".
(Если используется совместимая с MS Windows таблица назначения клавиш, то
CTRL-y будет повторять отменённую команду вместо прокрутки).

Для прокрутки вверх на целый экран (за вычетом двух строк) используйте CTRL-f
(forward, вперёд).  Для прокрутки вниз, используйте команду CTRL-b (backward,
назад).

По команде "zz", текст в окне прокручивается таким образом, что строка на
которой в данный момент находится курсор, отображается в середине окна
редактора vim.

        +-------------------+            +-------------------+
        | какой-то текст    |            | какой-то текст    |
        | какой-то текст    |            | какой-то текст    |
        | какой-то текст    |            | какой-то текст    |
        | какой-то текст    |   zz  -->  | строка с курсором |
        | какой-то текст    |            | какой-то текст    |
        | какой-то текст    |            | какой-то текст    |
        | строка с курсором |            | какой-то текст    |
        +-------------------+            +-------------------+

По команде "zt", текст прокручивается так, что строка в которой находится
курсор, отображается в верхней части окна редактора Vim. А по команде "zb",
соответственно, в нижней части окна.
    Существует также ещё несколько команд для прокрутки, см. |Q_sc|.
Если необходимо всегда видеть несколько строк в контексте с текущей строкой,
то установите соответствующее значение опции 'scrolloff'.

==============================================================================
*03.8*  Основные приёмы поиска

Чтобы найти в тексте требуемые слова используется команда "/слово".
Например, для поиска слова "include", используйте команду
>
        /include
<
Обратите внимание, что при наборе символа "/" (наклонная черта), курсор
перемещается на последнюю строку окна Vim, подобно команде начинающейся
с двоеточия, в этой строке и набирают искомые слова.  Используйте клавишу
<BS>, если понадобится внести исправления в набранном слове.  Клавиши
перемещения курсора <LEFT> и <RIGHT> также работают так, как им и полагается.
   По нажатию клавиши <ENTER> команда будет выполнена.

        Примечание.
        Символы .*[]^%/\?~$ имеют специальное значение.  Если необходимо
        использовать их в поисковом запросе, то перед каждым из них следует
        помещать символ \ (т.е. экранировать обратной наклонной чертой).

Чтобы найти следующее вхождение той же словарной строки, используйте команду
"n" (next, следующий).  Воспользуемся этим примером, чтобы найти первый
"#include" после курсора
>
        /#include
<
Затем нажмите "n" несколько раз.  Курсор будет перемещаться в тексте от одного
"#include" к другому "#include".  Также можно использовать счётчик, если
известно, какое именно соответствие необходимо.  По команде "3n" будет найдено
третье совпадение с искомым словом.  Числовые приставки с "/" не работают.

По команде "?" (символ знак вопроса) выполняются действия аналогичные команде
"/", но поиск осуществляется в обратном направлении
>
        ?слово
<
По команде "N" (латинская прописная буква N) выполняется последний поисковый
запрос, но в противоположном направлении.  То есть, по "N", после команды
прямого поиска --- "/", поиск идёт в обратном направлении, а после команды
обратного поиска --- "?", поиск идёт в прямом направлении.

РЕГИСТРОНЕЗАВИСИМЫЙ ПОИСК

Как правило, искомые слова необходимо указывать именно так, как они набраны
в тексте, с учётом регистра символов.  Если не так важно прописная буква
в слове или строчная, то установите опцию 'ignorecase'
>
        :set ignorecase
<
Если теперь повторите поиск для, например, "слово", то будут также найдены
и "Слово" и "СЛОВО".  Чтобы при поиске снова учитывался регистр символов,
сбросьте опцию следующей командой
>
        :set noignorecase
<

ЖУРНАЛ ПОИСКОВЫХ ЗАПРОСОВ

Предположим, что было три поисковых запроса для различных фрагментов текста:
>
        /один
        /два
        /три
<
Теперь ещё раз воспользуемся поиском набрав на клавиатуре символ "/",
но пока больше ничего не будем указывать или нажимать клавишу <ENTER>.  Если
теперь нажать клавишу перемещения курсора <UP>, в командной строке редактора
Vim будет выведено "/три".  И если после этого нажать клавишу <ENTER>, то
будет выполнен поиск слова "три".  А в случае если вместо клавиши <ENTER>
повторно нажать клавишу <UP>, то в командной строке будет выведено "/два".  Ещё
одно нажатие на клавишу <UP> приведёт к тому, что в командной строке будет
указано "/один".
    Точно так же для перемещения по журналу поисковых запросов в обратном
направлении можно использовать клавишу перемещения курсора <DOWN>.

Если известно, с чего начинается поисковый запрос, использованный раннее,
и необходимо вновь применить его, то наберите начальные символы поискового
запроса перед нажатием клавиши <UP>.  В предыдущем примере набор "/о<UP>"
приведёт к появлению "/один" в командной строке.

Команды, начинающиеся с символа ":" (двоеточие), также имеют свой
журнал.  Это позволяет быстро перейти к использованной ранее команде и
выполнить её.  Эти два журнала не связаны друг с другом.


ПОИСК СЛОВА ПОД КУРСОРОМ

Предположим, в тексте имеется слово "TheLongFunctionName" и необходимо найти
следующее упоминание этого слова в тексте.  Для этого можно набрать
"/TheLongFunctionName", но это потребует слишком много времени.  К тому же
в длинных словах легко допустить ошибку.
    Есть более простой способ.  Поместите курсор на искомое слово
и воспользуйтесь командой "*" (символ звёздочка).  Будет считано слово под
курсором и оно будет использовано в качестве поискового запроса.
    По команде "#" (символ номер) делается то же самое, но поиск выполняется в
противоположном направлении.  С этими командами также можно использовать
счётчики; по команде "3*" найдётся третье упоминание в тексте слова под
курсором.


ПОИСК ЦЕЛЫХ СЛОВ

Если для поиска слова "три" набрать "/три", то также будет найдено слово
"триста".  Поэтому, чтобы найти только "три", набирайте
>
        /\<три\>
<
Результат поиска не будет включать слова "триста" или "сотри".
В данном случае последовательность символов "\>" является специальным
признаком, указывающем на конец слова.  Аналогично, "\<" соответствует только
началу слова.  Например, чтобы найти все слова, которые заканчиваются на
"три", используйте такую команду
>
        /три\>
<
Обратите внимание, что команды "*" и "#" используют признаки "начало слова"
и "конец слова" для поиска только целых слов (для поиска частичных совпадений
можно использовать команды "g*" и "g#").


ПОДСВЕТКА СОВПАДЕНИЙ

Предположим, что при редактировании кода программы необходимо посмотреть, где
используется переменная "nr".  Для этого можно подвести курсор к "nr"
и использовать команду "*" в сочетании с командой "n", чтобы просмотреть все
упоминания этого слова в тексте.
   Есть ещё один способ.  Наберите команду
>
        :set hlsearch
<
Если ещё раз выполнить поиск "nr", то в редактируемом тексте будут подсвечены
все совпадения.
    Это очень удобно для того, чтобы посмотреть, где используется переменная
без необходимости ввода команд поиска.
   Для отключения подсветки наберите
>
        :set nohlsearch
<
Однако после этого придётся повторно включать подсветку если необходимо
выделять результаты следующих поисковых запросов.  Чтобы отключить подсветку
результата для какого-то конкретного поискового запроса, то лучше
воспользоваться такой вот командой
>
        :nohlsearch
<
По этой команде не изменяется значение опции, а просто временно отключается
подсветка.  Как только будет получен результат по этому поисковому запросу, то
все последующие найденые совпадения по другим поисковым запросом вновь будут
подсвечиваться. Тоже самое относится и к командам "n" и "N".


ПОДСТРОЙКА ПОИСКОВОЙ СИСТЕМЫ

Существует несколько параметров, изменяющих работу функции поиска.  Вот
наиболее интересные:
>
        :set incsearch
<
Данным параметром устанавливается режим при котором в тексте подсвечиваются
совпадения c искомой строкой символов по мере её набора в командной строке
редактора Vim.  Это можно использовать для проверки правильности набора
поискового выражения.  При нажатии клавиши <ENTER> происходит переход
к фактическому месту, где находится искомая строка, либо можно продолжить
набор для изменения поискового выражения.
>
        :set nowrapscan
<
Данным параметром устанавливается режим при котором поиск останавливается по
достижению нижней или верхней границ файла при прямом или обратном поиске
соответственно.  Обратный ему параметр 'wrapscan', установленный по умолчанию,
наоборот разрешает продолжение поиска от противоположного края при достижении
границ файла.


НЕБОЛЬШОЕ ОТСТУПЛЕНИЕ

Если приведённые выше параметры требуются для постоянной работы в редакторе Vim,
то их можно поместить в файл инициализации программы.
   Для этого откройте на редактирование файл, как это описано в разделе
|несовместимость|.  Или используйте следующую команду для поиска файла
инициализации
>
        :scriptnames
<
Откройте на редактирование файл, например, так
>
            :edit ~/.vimrc
<
Затем, добавьте в файл строку с командой активации параметра так, как если бы
она набиралась в командной строке редактора Vim.  Например,
>
        Go:set hlsearch<Esc>
<
Где "G" команда перехода на последнюю строку файла, "o" команда начала правки
новой строки, в которой записывается требуемый параметр начиная с команды
":set", и далее завершается режим вставки по клавише <ESC>.
После этого сохраните изменения в файле
>
        ZZ
<
Теперь, если вновь запустить редактор Vim, то параметр 'hlsearch' будет
активирована.

==============================================================================
*03.9*  Основные приёмы поиска с применением шаблонов

В редакторе Vim для указания предмета поиска используется регулярные
выражения.  Регулярные выражения являются чрезвычайно мощным и компактным
средством для создания шаблонов поиска.  К сожалению, эту силу они обретают
ценой сложности для понимания.
   В этом разделе мы упомянем только некоторые самые важные выражения.  Более
подробно о шаблонах и командах поиска рассказывается в главе 27 |usr_27.txt|.
Подробное объяснение можно прочитать здесь: |шаблон|.


НАЧАЛО И КОНЕЦ СТРОКИ

    Символ ^ (циркумфлекс) используется для указания на начало строки.  На
клавиатуре с американской раскладкой этот символ располагается над цифрой 6.
Шаблону "include" соответствует слово "include" в любом месте строки, в то
время как шаблону "^include" будет соответствовать слово "include" только в том
случае, если оно находится в начале строки.
    Символ $ (знак денежной единицы) используется для указания на конц строки.
Таким образом, шаблону "этот$" будет соответствовать слово "этот" только в том
случае, если оно находится в конце строки.

Давайте отметим места, где есть слово "не" в следующей строке с помощью "x":

        не говорите, что мне нужно делать, и я не ~
        xx                xx                   xx

Шаблон "/не$" позволит найти следующее совпадение:

        не говорите, что мне нужно делать, и я не ~
                                               xx

а шаблон "/^не" следующее:

        не говорите, что не нужно делать, и я не ~
        xx

Если производить поиск по шаблону "/^не$", то будут найдены только строки,
которые состоят из слова "не".  Имейте в виду, что пробелы учитываются, так
что если в строке перед или после слова "не" есть пробел, то шаблон его не
обнаружит.


СООТВЕТСТВИЕ ЛЮБОМУ ОДИНОЧНОМУ СИМВОЛУ

    Символ . (точка) соответствует любому одиночному символу.  Например,
шаблон "а.о" будет соответствовать строке, начинающейся с "а", с любым
последующим символом и "о" в качестве третьего символа.  Например,

        Ищу работу, не связанную с таковой ~
             xxx                    xxx


СООТВЕТСТВИЯ ДЛЯ СПЕЦИАЛЬНЫХ СИМВОЛОВ

Но что если надо найти совпадение с самой точкой?  В этом случае необходимо
ликвидировать её особый смысл, поместив в шаблоне обратную наклонную черту
перед ней.  Если выполнить поиск "е..", то в примере ниже будут найдены
следующие совпадения:

        Чук от Гека недалеко падает. ~
                xxx  xxx xxx     xxx

а поиск для "е.\." покажет только последнее соответствие.

==============================================================================
*03.10* Использование маркеров

Когда выполняется переход при помощи команды "G", то в редакторе Vim
запоминается позиция, из которой этот переход совершён.  Эта позиция
называется маркером.
[Прим. перевод.  В русском переводе принята следующая терминология --— mark
переводится как "маркер", а tag как "индекс".  Эти понятия не следует путать].
Для возврата к месту, откуда совершён переход, воспользуйтесь командой >

        ``

Где символ ` это символ машинописного обратного апострофа.
    При использовании этой команды повторно, курсор вновь вернётесь к месту
откуда был выполнен переход.  Это происходит потому, что символ ` сам по себе
является командой перехода, при этом запоминается позиция, откуда совершён
переход.

Как правило, это происходит каждый раз, когда выполняется команда, вызывающая
перемещение за пределы строки, и называется прыжком.  Сюда относятся и команды
"/" и "n" (независимо от того, насколько далеко находится соответствие).  Но
это не относится к командам поиска "fx" и "tx", а также командам перемещения
по словам "w" и "e".
    Кроме того, "j" и "k" также не считаются прыжком, даже в тех случаях,
когда перемещение бывает довольно далеко от исходной строки при указании
счётчика.

По команде `` курсор перемещается в прямом и обратном направлении между
двумя отмеченными точками.  По команде CTRL-O курсор перемещается к старым
позициям (older, более старый).  По команде CTRL-I можно перемещать к более
новым позициям (I находится на клавиатуре перед O).  Представьте следующую
последовательность команд:
>
        33G
        /^Команда
        CTRL-O
<
Сначала происходит прыжок к строке 33, затем поиск строки, начинающейся со
слова "Команда".  По нажатию клавиш CTRL-O совершается прыжок назад к строке
33.  Следующее использование команды CTRL-O возвращает курсор на исходную
позицию.  Если после этого воспользоваться командой CTRL-I, то будет совершён
прыжок назад на строку 33.  Последующее нажатие клавиш CTRL-I позволит
вернуться на позицию со словом "Команда".

             |  пример текста  ^             |
        33G  |  пример текста  |  CTRL-O     | CTRL-I
             |  пример текста  |             |
             V  стр 33  текст  ^             V
             |  пример текста  |             |
       /^Ком |  пример текста  |  CTRL-O     | CTRL-I
             V  Команда редак  |             V
                пример текста

        Примечание.
        Комбинация клавиш CTRL-I это то же самое, что и клавиша <Tab>.

По команде ":jumps" показывается список всех позиций, к которым производились
прыжки.  Последний прыжок отмечен в списке символом ">".


ИМЕНОВАННЫЕ МАРКЕРЫ                                          *bookmark* *закладки*

В редакторе Vim есть возможность указывать в тексте заданные пользователем
маркеры или другими словами закладки.  По команде "ma" позиция под курсором
помечается как маркер a.
Можно поместить в тексте до 26 маркеров (с наименованием от a до z).  Сами
маркеры невидимы в тексте, это всего-навсего позиции, которые запомнится
в редакторе.
    Для перехода к маркеру используйте команду `{маркер}, где {маркер} буква
обозначающая название маркера.  Чтобы перейти, например, к маркеру a, введите
>
        `a
<
По команде '{маркер}, курсор перемещается к началу строки, содержащей
указанный маркер.  В этом заключается отличие от команды `{маркер}, по которой
курсор перемещается в ту же колонку, в которой был установлен маркер.

Маркеры могут быть чрезвычайно полезными, когда нужно работать над двумя
связанными частями файла.  Предположим, что есть текст, расположенный в начале
файла, к которому надо часто обращаться по мере редактирования. 
    Переместите курсор к тексту в начале файла и установите там маркер,
например, s (start)
>
        ms
<
Затем переведите курсор к тексту, над которым работаете и установите там
маркер, например, e (end)
>
        me
<
Теперь можно перемещать курсор по тексту как угодно, но когда потребуется
обратиться к началу файла, то для прыжка достаточно воспользоваться командой
>
        's
<
После этого, для возврата к предыдущей позиции можно использовать '', или 'e
для перехода к тексту, над которым работали в перед этим.
   В использование s и e для именовании маркеров нет ничего особенного, просто
такие названия проще запомнить.

Для получения списка маркеров воспользуйтесь командой
>
        :marks
<
Обратите внимание, что в списке присутствует несколько специальных маркеров.
К ним относятся следующие маркеры:

        '        Позиция курсора перед прыжком
        "        Позиция курсора в последней редакции файла
        [        Начало последнего изменения
        ]        Конец последнего изменения

==============================================================================

Следующая глава: |usr_04.txt|  Внесение небольших изменений
Авторские права: см. |авторские_права_на_документацию|  

vim:tw=78:ts=8:ft=help:norl:
